KModel(
  (bert): CustomAlbert(
    (embeddings): AlbertEmbeddings(
      (word_embeddings): Embedding(178, 128, padding_idx=0)
      (position_embeddings): Embedding(512, 128)
      (token_type_embeddings): Embedding(2, 128)
      (LayerNorm): LayerNorm((128,), eps=1e-12, elementwise_affine=True)
      (dropout): Dropout(p=0, inplace=False)
    )
    (encoder): AlbertTransformer(
      (embedding_hidden_mapping_in): Linear(in_features=128, out_features=768, bias=True)
      (albert_layer_groups): ModuleList(
        (0): AlbertLayerGroup(
          (albert_layers): ModuleList(
            (0): AlbertLayer(
              (full_layer_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              (attention): AlbertSdpaAttention(
                (query): Linear(in_features=768, out_features=768, bias=True)
                (key): Linear(in_features=768, out_features=768, bias=True)
                (value): Linear(in_features=768, out_features=768, bias=True)
                (attention_dropout): Dropout(p=0, inplace=False)
                (output_dropout): Dropout(p=0, inplace=False)
                (dense): Linear(in_features=768, out_features=768, bias=True)
                (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)
              )
              (ffn): Linear(in_features=768, out_features=2048, bias=True)
              (ffn_output): Linear(in_features=2048, out_features=768, bias=True)
              (activation): NewGELUActivation()
              (dropout): Dropout(p=0, inplace=False)
            )
          )
        )
      )
    )
    (pooler): Linear(in_features=768, out_features=768, bias=True)
    (pooler_activation): Tanh()
  )
  (bert_encoder): Linear(in_features=768, out_features=512, bias=True)
  (predictor): ProsodyPredictor(
    (text_encoder): DurationEncoder(
      (lstms): ModuleList(
        (0): LSTM(640, 256, batch_first=True, dropout=0.2, bidirectional=True)
        (1): AdaLayerNorm(
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (2): LSTM(640, 256, batch_first=True, dropout=0.2, bidirectional=True)
        (3): AdaLayerNorm(
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (4): LSTM(640, 256, batch_first=True, dropout=0.2, bidirectional=True)
        (5): AdaLayerNorm(
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
      )
    )
    (lstm): LSTM(640, 256, batch_first=True, bidirectional=True)
    (duration_proj): LinearNorm(
      (linear_layer): Linear(in_features=512, out_features=50, bias=True)
    )
    (shared): LSTM(640, 256, batch_first=True, bidirectional=True)
    (F0): ModuleList(
      (0): AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (dropout): Dropout(p=0.2, inplace=False)
        (pool): Identity()
      )
      (1): AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(512, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=512, bias=True)
        )
        (conv1x1): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
        (dropout): Dropout(p=0.2, inplace=False)
        (pool): ConvTranspose1d(512, 512, kernel_size=(3,), stride=(2,), padding=(1,), output_padding=(1,), groups=512)
      )
      (2): AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=512, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=512, bias=True)
        )
        (dropout): Dropout(p=0.2, inplace=False)
        (pool): Identity()
      )
    )
    (N): ModuleList(
      (0): AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (dropout): Dropout(p=0.2, inplace=False)
        (pool): Identity()
      )
      (1): AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(512, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=512, bias=True)
        )
        (conv1x1): Conv1d(512, 256, kernel_size=(1,), stride=(1,), bias=False)
        (dropout): Dropout(p=0.2, inplace=False)
        (pool): ConvTranspose1d(512, 512, kernel_size=(3,), stride=(2,), padding=(1,), output_padding=(1,), groups=512)
      )
      (2): AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=512, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=512, bias=True)
        )
        (dropout): Dropout(p=0.2, inplace=False)
        (pool): Identity()
      )
    )
    (F0_proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
    (N_proj): Conv1d(256, 1, kernel_size=(1,), stride=(1,))
  )
  (text_encoder): TextEncoder(
    (embedding): Embedding(178, 512)
    (cnn): ModuleList(
      (0-2): 3 x Sequential(
        (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
        (1): LayerNorm()
        (2): LeakyReLU(negative_slope=0.2)
        (3): Dropout(p=0.2, inplace=False)
      )
    )
    (lstm): LSTM(512, 256, batch_first=True, bidirectional=True)
  )
  (decoder): Decoder(
    (encode): AdainResBlk1d(
      (actv): LeakyReLU(negative_slope=0.2)
      (upsample): UpSample1d()
      (conv1): Conv1d(514, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
      (conv2): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
      (norm1): AdaIN1d(
        (norm): InstanceNorm1d(514, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (fc): Linear(in_features=128, out_features=1028, bias=True)
      )
      (norm2): AdaIN1d(
        (norm): InstanceNorm1d(1024, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (fc): Linear(in_features=128, out_features=2048, bias=True)
      )
      (conv1x1): Conv1d(514, 1024, kernel_size=(1,), stride=(1,), bias=False)
      (dropout): Dropout(p=0.0, inplace=False)
      (pool): Identity()
    )
    (decode): ModuleList(
      (0-2): 3 x AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(1090, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(1024, 1024, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(1090, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=2180, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(1024, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=2048, bias=True)
        )
        (conv1x1): Conv1d(1090, 1024, kernel_size=(1,), stride=(1,), bias=False)
        (dropout): Dropout(p=0.0, inplace=False)
        (pool): Identity()
      )
      (3): AdainResBlk1d(
        (actv): LeakyReLU(negative_slope=0.2)
        (upsample): UpSample1d()
        (conv1): Conv1d(1090, 512, kernel_size=(3,), stride=(1,), padding=(1,))
        (conv2): Conv1d(512, 512, kernel_size=(3,), stride=(1,), padding=(1,))
        (norm1): AdaIN1d(
          (norm): InstanceNorm1d(1090, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=2180, bias=True)
        )
        (norm2): AdaIN1d(
          (norm): InstanceNorm1d(512, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          (fc): Linear(in_features=128, out_features=1024, bias=True)
        )
        (conv1x1): Conv1d(1090, 512, kernel_size=(1,), stride=(1,), bias=False)
        (dropout): Dropout(p=0.0, inplace=False)
        (pool): ConvTranspose1d(1090, 1090, kernel_size=(3,), stride=(2,), padding=(1,), output_padding=(1,), groups=1090)
      )
    )
    (F0_conv): Conv1d(1, 1, kernel_size=(3,), stride=(2,), padding=(1,))
    (N_conv): Conv1d(1, 1, kernel_size=(3,), stride=(2,), padding=(1,))
    (asr_res): Sequential(
      (0): Conv1d(512, 64, kernel_size=(1,), stride=(1,))
    )
    (generator): Generator(
      (m_source): SourceModuleHnNSF(
        (l_sin_gen): SineGen()
        (l_linear): Linear(in_features=9, out_features=1, bias=True)
        (l_tanh): Tanh()
      )
      (f0_upsamp): Upsample(scale_factor=300.0, mode='nearest')
      (noise_convs): ModuleList(
        (0): Conv1d(22, 256, kernel_size=(12,), stride=(6,), padding=(3,))
        (1): Conv1d(22, 128, kernel_size=(1,), stride=(1,))
      )
      (noise_res): ModuleList(
        (0): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
        )
        (1): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
        )
      )
      (ups): ModuleList(
        (0): ConvTranspose1d(512, 256, kernel_size=(20,), stride=(10,), padding=(5,))
        (1): ConvTranspose1d(256, 128, kernel_size=(12,), stride=(6,), padding=(3,))
      )
      (resblocks): ModuleList(
        (0): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
        )
        (1): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(7,), stride=(1,), padding=(3,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
        )
        (2): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(256, 256, kernel_size=(11,), stride=(1,), padding=(5,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=512, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x256x1]
              (1): Parameter containing: [torch.float32 of size 1x256x1]
              (2): Parameter containing: [torch.float32 of size 1x256x1]
          )
        )
        (3): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
            (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(3,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(5,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
        )
        (4): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
            (1): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(9,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(15,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
        )
        (5): AdaINResBlock1(
          (convs1): ModuleList(
            (0): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
            (1): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(15,), dilation=(3,))
            (2): Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(25,), dilation=(5,))
          )
          (convs2): ModuleList(
            (0-2): 3 x Conv1d(128, 128, kernel_size=(11,), stride=(1,), padding=(5,))
          )
          (adain1): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (adain2): ModuleList(
            (0-2): 3 x AdaIN1d(
              (norm): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
              (fc): Linear(in_features=128, out_features=256, bias=True)
            )
          )
          (alpha1): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
          (alpha2): ParameterList(
              (0): Parameter containing: [torch.float32 of size 1x128x1]
              (1): Parameter containing: [torch.float32 of size 1x128x1]
              (2): Parameter containing: [torch.float32 of size 1x128x1]
          )
        )
      )
      (conv_post): Conv1d(128, 22, kernel_size=(7,), stride=(1,), padding=(3,))
      (reflection_pad): ReflectionPad1d((1, 0))
      (stft): TorchSTFT()
    )
  )
)